{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOvrARnuSIUOpEYLzVjKLix"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Retrieve the datasets(Netflix)\n","\n","Netflix: https://www.kaggle.com/datasets/netflix-inc/netflix-prize-data\n"],"metadata":{"id":"E93_Kw2nZUQ0"}},{"cell_type":"code","source":["import kagglehub\n","import os\n","import shutil\n","from google.colab import drive\n","\n","# Download Netflix Prize dataset\n","path = kagglehub.dataset_download(\"netflix-inc/netflix-prize-data\")\n","print(\"‚úÖ Downloaded dataset path:\", path)\n","drive.mount('/content/drive', force_remount=True) #Mount\n","drive_path = \"/content/drive/MyDrive/Netflix_Dataset/\"\n","\n","# Create directory if it doesn't exist\n","if not os.path.exists(drive_path):\n","    os.makedirs(drive_path)\n","print(f\"üìÇ Dataset will be saved in: {drive_path}\")\n","\n","#  Move downloaded files to Google Drive\n","for file in os.listdir(path):\n","    shutil.move(os.path.join(path, file), os.path.join(drive_path, file))\n","\n","print(\"Netflix dataset successfully saved in Google Drive.\")\n","print(\"Files in Google Drive Netflix dataset folder:\")\n","print(os.listdir(drive_path))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K4-F4D6gZacO","executionInfo":{"status":"ok","timestamp":1741871907976,"user_tz":240,"elapsed":3989,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"ccc60447-8a8a-494d-b560-8027be066287"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["‚úÖ Downloaded dataset path: /root/.cache/kagglehub/datasets/netflix-inc/netflix-prize-data/versions/2\n","Mounted at /content/drive\n","üìÇ Dataset will be saved in: /content/drive/MyDrive/Netflix_Dataset/\n","Netflix dataset successfully saved in Google Drive.\n","Files in Google Drive Netflix dataset folder:\n","['README', 'combined_data_1.txt', 'combined_data_2.txt', 'combined_data_3.txt', 'movie_titles.csv', 'qualifying.txt', 'combined_data_4.txt', 'probe.txt', 'combined_data_1_fixed.csv', 'movies_data_fixed.csv']\n"]}]},{"cell_type":"markdown","source":["# 1. Dataset Description\n","**combined_data_1.txt, combined_data_2.txt, combined_data_3.txt, combined_data_4.txt:**\n","\n","These four files contain the user ratings for movies.\n","*   Movie ID (indicated by a line ending with :)\n","*   User ID\n","*  Rating (1-5 stars)\n","*  Date (YYYY-MM-DD)"],"metadata":{"id":"5eqJnQtYYUAA"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# Define dataset path\n","dataset_path = \"/content/drive/MyDrive/Netflix_Dataset/\"\n","file_path = os.path.join(dataset_path, \"combined_data_1.txt\")\n","\n","# Initialize variables\n","movie_id = None\n","ratings_list = []\n","\n","# Read original TXT file and process data correctly\n","with open(file_path, \"r\", encoding=\"utf-8\") as f:\n","    for line in f:\n","        line = line.strip()\n","        if line.endswith(\":\"):  # Movie ID line (e.g., \"1:\")\n","            movie_id = int(line[:-1])\n","        else:\n","            # Try to split into 3 parts: UserID, Rating, Date\n","            parts = line.split(\",\")\n","            if len(parts) == 3:\n","                user_id, rating, date = parts\n","                ratings_list.append([int(user_id), movie_id, int(rating), date])\n","            else:\n","                print(f\"‚ö†Ô∏è Skipping malformed line: {line}\")  # Debugging issue"],"metadata":{"id":"HvZDLB9VZ-EG","executionInfo":{"status":"ok","timestamp":1741871973726,"user_tz":240,"elapsed":65646,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# Convert to DataFrame\n","df_ratings = pd.DataFrame(ratings_list, columns=[\"UserID\", \"MovieID\", \"Rating\", \"Date\"])\n","\n","# Save corrected CSV\n","csv_save_path = os.path.join(dataset_path, \"combined_data_1_fixed.csv\")\n","df_ratings.to_csv(csv_save_path, index=False)\n","\n","print(f\"‚úÖ Fixed ratings data saved as '{csv_save_path}'\")\n","df_ratings.head()  # Check first few rows"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":245},"id":"43-0MipDlQI0","executionInfo":{"status":"ok","timestamp":1741872051599,"user_tz":240,"elapsed":77877,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"aea78b5a-ca4b-476e-d037-6a447e532f0b"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["‚úÖ Fixed ratings data saved as '/content/drive/MyDrive/Netflix_Dataset/combined_data_1_fixed.csv'\n"]},{"output_type":"execute_result","data":{"text/plain":["    UserID  MovieID  Rating        Date\n","0  1488844        1       3  2005-09-06\n","1   822109        1       5  2005-05-13\n","2   885013        1       4  2005-10-19\n","3    30878        1       4  2005-12-26\n","4   823519        1       3  2004-05-03"],"text/html":["\n","  <div id=\"df-bd763600-ba87-427a-8d0a-895d5c5f52f9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>UserID</th>\n","      <th>MovieID</th>\n","      <th>Rating</th>\n","      <th>Date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1488844</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2005-09-06</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>822109</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>2005-05-13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>885013</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>2005-10-19</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30878</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>2005-12-26</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>823519</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2004-05-03</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd763600-ba87-427a-8d0a-895d5c5f52f9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bd763600-ba87-427a-8d0a-895d5c5f52f9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bd763600-ba87-427a-8d0a-895d5c5f52f9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3c52a3ad-0c50-423e-a398-3fb0e368f869\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3c52a3ad-0c50-423e-a398-3fb0e368f869')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3c52a3ad-0c50-423e-a398-3fb0e368f869 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_ratings"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["**movie_titles.csv:**\n","\n","*   Movie ID (unique identifier for each movie)\n","*   Year of Release\n","* Title of the movie\n"],"metadata":{"id":"dIe05j46TnvE"}},{"cell_type":"code","source":["# Define dataset path\n","dataset_path = \"/content/drive/MyDrive/Netflix_Dataset/\"\n","file_path = os.path.join(dataset_path, \"movie_titles.csv\")\n","\n","# Open and read first 10 lines to inspect the structure\n","print(\"üìÑ First 10 lines of movie_titles.csv:\")\n","with open(file_path, \"r\", encoding=\"ISO-8859-1\") as f:\n","    for _ in range(10):\n","        print(f.readline().strip())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"irTLRF0Wmfb0","executionInfo":{"status":"ok","timestamp":1741872051617,"user_tz":240,"elapsed":8,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"541402c4-8a87-4a03-b5e2-76196d965e6c"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["üìÑ First 10 lines of movie_titles.csv:\n","1,2003,Dinosaur Planet\n","2,2004,Isle of Man TT 2004 Review\n","3,1997,Character\n","4,1994,Paula Abdul's Get Up & Dance\n","5,2004,The Rise and Fall of ECW\n","6,1997,Sick\n","7,1992,8 Man\n","8,2004,What the #$*! Do We Know!?\n","9,1991,Class of Nuke 'Em High 2\n","10,2001,Fighter\n"]}]},{"cell_type":"code","source":["# Load movie titles dataset\n","df_movies = pd.read_csv(\n","    file_path,\n","    encoding=\"ISO-8859-1\",  # Encoding to handle special characters\n","    header=None,  # No header in the original file\n","    names=[\"MovieID\", \"Year\", \"Title\"],  # Assign column names\n","    quoting=3,  # Ignore quotes inside values\n","    on_bad_lines=\"skip\"  # Skip malformed lines instead of raising errors\n",")\n","\n","# Convert \"Year\" column to integer type\n","df_movies[\"Year\"] = pd.to_numeric(df_movies[\"Year\"], errors='coerce').astype(\"Int64\")\n","# Set MovieID as index (No merging)\n","df_movies.set_index(\"MovieID\", inplace=True)\n","# Save cleaned movie titles dataset\n","csv_save_path = os.path.join(dataset_path, \"movies_data_fixed.csv\")\n","df_movies.to_csv(csv_save_path)\n","print(f\"‚úÖ Movie titles data saved as '{csv_save_path}'\")\n","df_movies.head()  # Check first few rows"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":276},"id":"aRWSyfXuWl-5","executionInfo":{"status":"ok","timestamp":1741872051776,"user_tz":240,"elapsed":153,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"df09ff25-622b-4d4c-a252-14410477a080"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["‚úÖ Movie titles data saved as '/content/drive/MyDrive/Netflix_Dataset/movies_data_fixed.csv'\n"]},{"output_type":"execute_result","data":{"text/plain":["         Year                         Title\n","MovieID                                    \n","1        2003               Dinosaur Planet\n","2        2004    Isle of Man TT 2004 Review\n","3        1997                     Character\n","4        1994  Paula Abdul's Get Up & Dance\n","5        2004      The Rise and Fall of ECW"],"text/html":["\n","  <div id=\"df-363acf0b-e27c-48eb-b43a-834c26f7bc15\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Title</th>\n","    </tr>\n","    <tr>\n","      <th>MovieID</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>2003</td>\n","      <td>Dinosaur Planet</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2004</td>\n","      <td>Isle of Man TT 2004 Review</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1997</td>\n","      <td>Character</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1994</td>\n","      <td>Paula Abdul's Get Up &amp; Dance</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2004</td>\n","      <td>The Rise and Fall of ECW</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-363acf0b-e27c-48eb-b43a-834c26f7bc15')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-363acf0b-e27c-48eb-b43a-834c26f7bc15 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-363acf0b-e27c-48eb-b43a-834c26f7bc15');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-585d96ae-aa44-4772-9852-5bde13fc6d59\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-585d96ae-aa44-4772-9852-5bde13fc6d59')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-585d96ae-aa44-4772-9852-5bde13fc6d59 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_movies","summary":"{\n  \"name\": \"df_movies\",\n  \"rows\": 17434,\n  \"fields\": [\n    {\n      \"column\": \"MovieID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5129,\n        \"min\": 1,\n        \"max\": 17770,\n        \"num_unique_values\": 17434,\n        \"samples\": [\n          4075,\n          17165,\n          15071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 94,\n        \"samples\": [\n          1975,\n          1995,\n          1974\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 17026,\n        \"samples\": [\n          \"Lord of Illusions\",\n          \"Swimming Upstream\",\n          \"Charlotte Sometimes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["Instead of merging, we will load combined_data_1.csv and movie_titles.csv separately and kept them as distinct DataFrames."],"metadata":{"id":"8sz3IniIm3VY"}},{"cell_type":"markdown","source":["#Utilizing Datasets Separately\n","\n","    Use df_ratings and df_movies independently without merging them.\n","    Convert df_ratings into a User-Movie matrix using pivot_table and csr_matrix."],"metadata":{"id":"R5DkD28ur_fi"}},{"cell_type":"code","source":["'''import pandas as pd\n","from scipy.sparse import csr_matrix\n","\n","ratings_path = \"/content/drive/MyDrive/Netflix_Dataset/combined_data_1_fixed.csv\"\n","df_ratings = pd.read_csv(ratings_path)\n","\n","# üìåUserID & MovieID\n","user_movie_matrix = df_ratings.pivot(index=\"UserID\", columns=\"MovieID\", values=\"Rating\")\n","rating_matrix_sparse = csr_matrix(user_movie_matrix.values)\n","print(\"‚úÖ User-Movie Matrix transformation completed!\")\n","user_movie_matrix.head()''' #USE ALL RAM\n","\n","import pandas as pd\n","import numpy as np\n","from scipy.sparse import coo_matrix\n","\n","# üìå 1. Load rating data (optimize memory usage by specifying data types)\n","ratings_path = \"/content/drive/MyDrive/Netflix_Dataset/combined_data_1_fixed.csv\"\n","df_ratings = pd.read_csv(ratings_path, dtype={\"UserID\": np.int32, \"MovieID\": np.int16, \"Rating\": np.float32})\n","\n","# üìå 2. Convert UserID and MovieID to sequential indices (reduce memory usage)\n","user_ids = {id: idx for idx, id in enumerate(df_ratings[\"UserID\"].unique())}\n","movie_ids = {id: idx for idx, id in enumerate(df_ratings[\"MovieID\"].unique())}\n","\n","df_ratings[\"UserID\"] = df_ratings[\"UserID\"].map(user_ids)\n","df_ratings[\"MovieID\"] = df_ratings[\"MovieID\"].map(movie_ids)\n","\n","# üìå 3. Create a sparse matrix (directly constructing a COO sparse matrix)\n","rating_matrix_sparse = coo_matrix(\n","    (df_ratings[\"Rating\"], (df_ratings[\"UserID\"], df_ratings[\"MovieID\"])),\n","    shape=(len(user_ids), len(movie_ids)))\n","\n","print(\"‚úÖ Sparse Matrix Transformation Completed!\")\n","print(f\"Shape of the matrix: {rating_matrix_sparse.shape}\")  # (num_users, num_movies)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ueYZsxmfnm5S","executionInfo":{"status":"ok","timestamp":1741872392699,"user_tz":240,"elapsed":22035,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"f597f341-370b-4abd-f379-1faabf02ca1c"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["‚úÖ Sparse Matrix Transformation Completed!\n","Shape of the matrix: (470758, 4499)\n"]}]},{"cell_type":"code","source":["from scipy.sparse import save_npz\n","\n","sparse_matrix_path = \"/content/drive/MyDrive/Netflix_Dataset/sparse_matrix.npz\"\n","\n","# Save it!\n","save_npz(sparse_matrix_path, rating_matrix_sparse)\n","print(f\"‚úÖ Sparse matrix saved at: {sparse_matrix_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TvA4wqtprXuV","executionInfo":{"status":"ok","timestamp":1741872415499,"user_tz":240,"elapsed":22802,"user":{"displayName":"Yeonbi Han","userId":"00742660692379233666"}},"outputId":"d8f36e2c-e1b6-4fe3-f690-19e18847d7d9"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["‚úÖ Sparse matrix saved at: /content/drive/MyDrive/Netflix_Dataset/sparse_matrix.npz\n"]}]}]}